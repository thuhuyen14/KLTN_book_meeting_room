// ==============================
// üü¶ X·ª¨ L√ù LOGIN / LOGOUT & MENU
// ==============================
document.addEventListener("DOMContentLoaded", () => {
  const token = localStorage.getItem("token");
  const role = localStorage.getItem("role");
  const full_name = localStorage.getItem("full_name");
  const userMenu = document.getElementById("userMenu");

  if (!userMenu) return;

  // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p -> hi·ªÉn th·ªã menu t√†i kho·∫£n
  if (token) {
    userMenu.innerHTML = `
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown">
          <img src="images/avatar_default.png" alt="avatar" class="rounded-circle me-2" width="30" height="30">
          <span>${full_name || "T√†i kho·∫£n"}</span>
        </a>
        <ul class="dropdown-menu dropdown-menu-end">
          <li class="dropdown-item-text text-muted small">Vai tr√≤: ${role || "user"}</li>
          <li><hr class="dropdown-divider"></li>
          <li><a class="dropdown-item" href="profile.html">Trang c√° nh√¢n</a></li>
          <li><a class="dropdown-item" href="#" id="logoutBtn">ƒêƒÉng xu·∫•t</a></li>
        </ul>
      </li>
    `;

    const logoutBtn = document.getElementById("logoutBtn");
    if (logoutBtn) {
      logoutBtn.addEventListener("click", () => {
        // X√≥a to√†n b·ªô d·ªØ li·ªáu phi√™n
        localStorage.clear();
        sessionStorage.clear();

        // Reset menu & th√¥ng b√°o
        userMenu.innerHTML = `<li class="nav-item"><a class="btn btn-outline-light ms-2" href="login.html">ƒêƒÉng nh·∫≠p</a></li>`;
        const notifList = document.getElementById("notification-list");
        const notifCount = document.getElementById("notification-count");
        if (notifList) notifList.innerHTML = '<li>Ch∆∞a c√≥ th√¥ng b√°o n√†o</li>';
        if (notifCount) notifCount.textContent = '0';

        // V·∫´n ·ªü index.html, kh√¥ng redirect
      });
    }
  } else {
    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p -> hi·ªÉn th·ªã n√∫t ƒëƒÉng nh·∫≠p
    userMenu.innerHTML = `<li class="nav-item"><a class="btn btn-outline-light ms-2" href="login.html">ƒêƒÉng nh·∫≠p</a></li>`;
  }

  // ===== 3Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn truy c·∫≠p trang kh√°c =====
  const protectedPages = ["profile.html", "booking.html", "other.html"]; // danh s√°ch c√°c trang c·∫ßn login
  const currentPage = window.location.pathname.split("/").pop();
  if (!token && protectedPages.includes(currentPage)) {
    alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y");
    window.location.href = "login.html"; // redirect v·ªÅ login
  }
});

// ==============================
// üü® TH√îNG B√ÅO NG∆Ø·ªúI D√ôNG (Notification)
// ==============================
const notifBell = document.getElementById('notification-bell');
const notifDropdown = document.getElementById('notification-dropdown');
const notifList = document.getElementById('notification-list');
const notifCount = document.getElementById('notification-count');

async function loadNotifications() {
  const userId = localStorage.getItem('id'); // ID ng∆∞·ªùi ƒëƒÉng nh·∫≠p
  if (!userId || !notifList || !notifCount) return;

  try {
    const res = await fetch(`/api/notifications/${userId}`);
    if (!res.ok) throw new Error('Kh√¥ng t·∫£i ƒë∆∞·ª£c th√¥ng b√°o');
    const data = await res.json();

    notifList.innerHTML = '';
    if (data.length === 0) {
      notifList.innerHTML = '<li>Ch∆∞a c√≥ th√¥ng b√°o n√†o</li>';
      notifCount.textContent = '0';
    } else {
      notifCount.textContent = data.length;
      data.forEach(n => {
        const li = document.createElement('li');
        li.textContent = `${new Date(n.created_at).toLocaleString()} - ${n.message}`;
        notifList.appendChild(li);
      });
    }
  } catch (err) {
    console.error('L·ªói khi t·∫£i th√¥ng b√°o:', err);
  }
}

if (notifBell && notifDropdown) {
  notifBell.addEventListener('click', () => {
    notifDropdown.classList.toggle('d-none');
  });
}

// Load th√¥ng b√°o khi m·ªü trang
loadNotifications();

// Refresh ƒë·ªãnh k·ª≥ m·ªói 60s
setInterval(loadNotifications, 60000);
